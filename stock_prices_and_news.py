from datetime import date, timedelta
from io import BytesIO
import os
from pathlib import Path
import requests
from tkinter import *
from tkinter import ttk, messagebox
import webbrowser

import finnhub
from PIL import Image, ImageTk
from plyer import notification
import sv_ttk

# Refresh stock prices every {REFRESH} ms
REFRESH = 30000
API_KEY = os.getenv("FINNHUB_API_KEY")

# Icon as base64 string
icon = """iVBORw0KGgoAAAANSUhEUgAABLAAAASwCAYAAADrIbPPAAAABGdBTUEAALGPC/xhBQAAACBjSFJN
AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsTAAALEwEAmpwY
AAABWWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpu
czptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9
Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRm
OkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8v
bnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3Rp
ZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+Cjwv
eDp4bXBtZXRhPgpMwidZAABAAElEQVR4AezdB5ws2Vkf7F0hIRBBoCyBYBVRNmByUiIrkL41yBh/
ZEwyyWAwNgZsMBhMMmARDBj4ELYykkAgJF0wGZEkRHQgRzkRHEBmv7e0t/beO7enp7q76rwnPPP7
HfVMd9UJzzmnu+a/NVc33OCLAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAQKUCN1baL90iQIAAAQIECBAgQIAAgTEFHh3DfuiYQzdq
AgcJPPWgoxs/WIDV+ATqPgECBAgQIECAAAECBDoTuHuM58VRHtnZuAyHwNoCQ2U6t1tbT30ECBAg
QIAAAQIECBAgQOAEgT+Ocx8f5RUn1OFUAgQ6ExBgdTahhkOAAAECBAgQIECAAIEOBIRYHUyiIRBY
U0CAtaamuggQIECAAAECBAgQIEBgLQEh1lqS6iHQgYAAq4NJNAQCBAgQIECAAAECBAh0KiDE6nRi
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
dKdTbWMVXpVa7dohQIAAAQIECBAgQIAAAQIEmhOYwqtvi1JboDNSf4RXzW0bHSZAgAABAgQIECBA
gAABAgRKCUzh1bdGGSksqm2sU3j18FITrh0CBAgQIECAAAECBAgQIECAQEsCwqv84E541dKO0VcC
BAgQIECAAAECBAgQIECgqMAUXn1LlNruRhqpP8KrokteYwQIECBAgAABAgQIECBAgEAzArfccsuN
0VnhVW54J7xqZsfoKAECBAgQIECAAAECBAgQIFBU4HJ49a+j0ZHudKptrMKroqteYwQIECBAgAAB
AgQIECBAgEAzAsKrKkI74VUzO0ZHCRAgQIAAAQIECBAgQIAAgaICl8Orb45Ga7sbaaT+CK+KrnqN
ESBAgAABAgQIECBAgAABAs0IXA6vvik6PFJYVNtYhVfN7BgdJUCAAAECBAgQIECAAAECBIoKXA6v
vjEarS3QGak/wquiq15jBAgQIECAAAECBAgQIECAQDMCwqsqQjvhVTM7RkcJECBAgAABAgQIECBA
gACBogKXw6tviEZHutOptrEKr4queo0RIECAAAECBAgQIECAAAECzQhcDq+eGh2uLdAZqT/Cq2Z2
jI4SIECAAAECBAgQIECAAAECRQUuh1f/KhodKSyqbazCq6KrXmMECBAgQIAAAQIECBAgQIBAMwLC
qypCO+FVMztGRwkQIECAAAECBAgQIECAAIGiApfDq6+PRmu7G2mk/giviq56jREgQIAAAQIECBAg
QIAAAQLNCFwOr74uOjxSWFTbWIVXzewYHSVAgAABAgQIECBAgAABAgQyBIRXueGd8Cpj1WuTAAEC
BAgQIECAAAECBAgQaEZAeCW8amax6igBAgQIECBAgAABAgQIECAwnsDXxpBr+1O6kfrjzqvx9pwR
EyBAgAABAgQIECBAgAABAgcI/Ms4dqSwqLaxCq8OWKwOJUCAAAECBAgQIECAAAECBMYTEF7lhnfC
q/H2nBETIECAAAECBAgQIECAAAECBwh8TRxb291II/VHeHXAYnUoAQIECBAgQIAAAQIECBAgMJ7A
V8eQRwqLahur8Gq8PWfEBAgQIECAAAECBAgQIECAwAECXxXH1hbojNQf4dUBi9WhBAgQIECAAAEC
BAgQIECAwHgCwqvc8E54Nd6eM2ICBAgQIECAAAECBAgQIEDgAIGvjGNHutOptrEKrw5YrA4lQIAA
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
moAAq7WJ5KtHeJVvZiomQIAAAQIECBAgQIAAAQKpBARYqcbVXLHCq+ZGoiACBAgQIECAAAECBAgQ
ILA8AQHW8mY6VUfCq6mknUOAAAECBAgQIECAAAECBIoLCLCKvwF6ti+86gnnMQIECBAgQIAAAQIE
CBAgQGB3AQHW7mbVnxBeVX8H6J8AAQIECBAgQIAAAQIECEwsIMCaGDz5ccKr5ANUPgECBAgQIECA
AAECBAgQyCggwMo4tXlqFl7N4+5UAgQIECBAgAABAgQIECBQXkCAVf4tsBWA8GorJjcRIECAAAEC
BAgQIECAAAECYwgIsMZQXdaewqtlzVM3BAgQIECAAAECBAgQIEAgnYAAK93IJi1YeDUpt8MIECBA
gAABAgQIECBAgACBowQEWEepeK0TEF55HxAgQIAAAQIECBAgQIAAAQJNCAiwmhhDc0UIr5obiYII
ECBAgAABAgQIECBAgEBdAQFW3dmv6lx4tUrG6wQIECBAgAABAgQIECBAgMAsAgKsWdibPVR41exo
FEaAAAECBAgQIECAAAECBOoKCLDqzv5w58KrwyK+JkCAAAECBAgQIECAAAECBJoQEGA1MYbZixBe
zT4CBRAgQIAAAQIECBAgQIAAAQKrBARYq2TqvC68qjNrnRIgQIAAAQIECBAgQIAAgZQCAqyUYxus
aOHVYJQ2IkCAAAECBAgQIECAAAECBMYSEGCNJZtj3y9EmVfnKFWVBAgQIECAAAECBAgQIECAQFUB
AVbVyd/f97Nqt697AgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAq
PHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQI
ECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBA
gAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOA
ACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQI
ECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBA
gAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACB
wgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHyt
EyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBA
gAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAAB
AgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvD
lNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBA
gAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAAB
AgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgIC
rMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBA
gAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAAB
AgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQy
CAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRI
gAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAAB
AgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQI
ECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD
1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAAB
AgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQI
ECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiw
MkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAAB
AgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQI
ECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgs
IMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoB
AgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQI
ECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBA
IIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJ
jQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQI
ECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBA
gACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAq
PHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQI
ECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBA
gAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOA
ACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQI
ECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBA
gAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACB
wgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHyt
EyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBA
gAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAAB
AgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvD
lNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBA
gAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAAB
AgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgIC
rMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBA
gAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAAB
AgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQy
CAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRI
gAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAAB
AgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQI
ECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD
1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAAB
AgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQI
ECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiw
MkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAAB
AgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQI
ECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgs
IMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoB
AgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQI
ECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBA
IIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJ
jQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQI
ECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBA
gACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAq
PHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQI
ECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBA
gAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOA
ACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQI
ECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBA
gAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACB
wgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHyt
EyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBA
gAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAAB
AgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvD
lNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBA
gAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAAB
AgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgIC
rMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBA
gAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAAB
AgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQy
CAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRI
gAABAgQIECBAgAABAgQIECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAAB
AgQIECBAgACBwgICrMLD1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQI
ECgsIMAqPHytEyBAgAABAgQIECBAgAABAgQyCAiwMkxJjQQIECBAgAABAgQIECBAgACBwgICrMLD
1zoBAgQIECBAgAABAgQIECBAIIOAACvDlNRIgAABAgQIECBAgAABAgQIECgscE7h3rV+7NhPBcLD
QBAgQGAHgX+zw70Vbj0RTf5IhUb1SIDAYAL/arCd8m/0r6MF/w3NP0cdEJhS4N9OeZizCBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAg
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAA
AQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE
CBAgsJXA/wfPIOyOxelh3gAAAABJRU5ErkJggg=="""

# Get the user's home directory dynamically
if os.name == "nt":  # Windows
    drive = os.getenv("HOMEDRIVE", "C:")
    home_path = os.getenv("HOMEPATH", "\\Users\\Default")
    documents_path = os.path.join(drive, home_path, "Documents")
else:  # Linux (or other POSIX-compliant OS)
    home_path = os.getenv("HOME", "/home/default")
    documents_path = os.path.join(home_path, "Documents")

# Define the directory and file path
directory = os.path.join(documents_path, "StockAnalysisNews")
file_path = os.path.join(directory, "_stocks.txt")

# Ensure the directory exists
os.makedirs(directory, exist_ok=True)

# Ensure the file exists
file = Path(file_path)
if not file.exists():
    file.touch()  # Create the file
    print(f"Stock list file created at: {file_path}")
else:
    print(f"Stock list file exists at: {file_path}")

# Set up the finnhub client
finnhub_client = finnhub.Client(api_key=API_KEY)


def main():
    # Set up the main window of the program
    window = Tk()
    window.resizable(False, False)
    width = 500
    height = 600
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x_coordinate = int((screen_width / 2) + (width / 8))
    y_coordinate = int((screen_height / 2) - (height / 2))
    window.geometry(f"{width}x{height}+{x_coordinate}+{y_coordinate}")
    window.title("Stock Prices & News")
    window.iconphoto(False, PhotoImage(data=icon))

    # Set the SunValley dark theme
    sv_ttk.set_theme("dark")

    # Configure window to allow resizing
    window.grid_rowconfigure(0, weight=1)  # Make the first row expandable
    window.grid_columnconfigure(0, weight=1)  # Make the first column expandable

    # Create a notebook for tabs
    notebook = ttk.Notebook(window, width=width, height=height)
    my_stocks = ttk.Frame(notebook)
    settings = ttk.Frame(notebook)

    # my_stocks frame
    show_buttons(my_stocks)
    show_market_status(my_stocks)
    show_stocks(my_stocks)

    # settings frame
    # ---
    settings_placeholder_frame = ttk.Frame(settings)
    settings_placeholder_frame.pack()
    settings_label = ttk.Label(settings_placeholder_frame, text="Nothing to see here (for now) ;)", font=("Helvetica", 13),
                               padding="0 40 0 0")
    settings_label.pack()
    # ---

    # Add everything to a notebook so we can use tabs
    notebook.add(my_stocks, text='Stocks')
    notebook.add(settings, text='Settings')
    notebook.pack()
    notebook.grid_rowconfigure(0, weight=1)
    notebook.grid_columnconfigure(0, weight=1)

    # Set focus on the window and start it
    window.focus_set()
    window.mainloop()


# Show buttons for adding and removing stocks
def show_buttons(parent_element):
    buttons_frame = ttk.Frame(parent_element, padding="0 20 0 10")
    buttons_frame.pack()
    button1 = ttk.Button(buttons_frame, text="Add stock", command=lambda: show_add_stock_window(parent_element))
    button1.grid(row=0, column=0, padx=10)
    button2 = ttk.Button(buttons_frame, text="Remove stock", command=lambda: show_remove_stock_window(parent_element))
    button2.grid(row=0, column=1, padx=10)


# Show the current market status
def show_market_status(parent_element):
    market_status = ttk.Frame(parent_element, padding="0 5 0 0")
    market_status.pack()
    status = get_market_status()
    color = "white"
    match status["status"]:
        case "pre-market":
            color = "blue"
        case "regular":
            color = "green"
        case "post-market":
            color = "purple"
        case None:
            color = "red"
        case _:
            if not status['is_open']:
                color = "red"
    Label(parent_element, text=f"Market status: {status['status'].title()}", foreground=color, font="Helvetica 13").pack()


# Get the current market status
def get_market_status(exchange="US"):
    r = finnhub_client.market_status(exchange=exchange)
    return {"is_open": r.get("isOpen"), "status": r.get("session") if r.get("session") else "Closed"}


# Show stocks as tkinter Frames inside a scrollable frame
last_notified_prices = dict()
def show_stocks(parent_element):
    global last_notified_prices
    """Show stocks dynamically with price and news updates."""
    def fetch_and_update_prices():
        for _i, _symbol in enumerate(stocks):
            # Variables
            current_price = fetch_prices(_symbol)["current_price"]
            pc = fetch_prices(_symbol)["price_change"]
            percent_c = fetch_prices(_symbol)["percent_change"]
            # Update stock price
            price = f"{current_price:.2f}" if current_price >= 1 else current_price
            current_price_labels[_i].config(text=f"${price}")

            # Update price change
            pc = fetch_prices(_symbol)["price_change"]
            price_change = None
            color = "white"
            if pc >= 0:
                price_change = f"+{pc}"
                if pc > 0:
                    color = "green"
            elif pc < 0:
                price_change = f"{pc}"
                color = "red"
            percent_change = f"{percent_c}%"
            price_change_labels[_i].config(text=f"{price_change} ({percent_change})", foreground=color)

            # Send notification if the price has gone up by 10% since the last notification
            last_notified_price = last_notified_prices.get(_symbol, 0)
            if last_notified_price != 0:
                # Calculate 10% increase threshold from last notified price
                if current_price >= last_notified_price * 1.1:
                    # Send notification
                    notification.notify(
                        title=f'{_symbol} Alert',
                        message=f'{get_full_name(_symbol)} went up {percent_change} today!',
                        app_name='Stock Prices & News',
                        timeout=10  # Duration in seconds
                    )
                    # Update the last notified price to the current price
                    last_notified_prices[_symbol] = current_price
                elif current_price <= last_notified_price * 0.9:
                    # Send notification
                    notification.notify(
                        title=f'{_symbol} Alert',
                        message=f'{get_full_name(_symbol)} went up {percent_change} today!',
                        app_name='Stock Prices & News',
                        timeout=10  # Duration in seconds
                    )
                    # Update the last notified price to the current price
                    last_notified_prices[_symbol] = current_price
            else:
                # If no previous notification, send one when the price is up by 10% or more from the start
                if percent_c >= 10:
                    notification.notify(
                        title=f'{_symbol} Alert',
                        message=f'{get_full_name(_symbol)} went up {percent_change} today!',
                        app_name='Stock Prices & News',
                        timeout=10  # Duration in seconds
                    )
                    # Update the last notified price to the current price
                    last_notified_prices[_symbol] = current_price
                elif percent_c <= -10:
                    notification.notify(
                        title=f'{_symbol} Alert',
                        message=f'{get_full_name(_symbol)} went down {percent_change} today.',
                        app_name='Stock Prices & News',
                        timeout=10  # Duration in seconds
                    )
                    # Update the last notified price to the current price
                    last_notified_prices[_symbol] = current_price

            # Fetch and display the news count for the stock
            _news_data = get_news(_symbol)
            _news_count = _news_data["quantity"] if _news_data else 0
            _news_button = news_buttons[_i]  # Referencing the button for each stock
            news_button.config(text=f"{_news_count if _news_count <= 50 else '>50'} news")  # Update button text with the news count

        # Schedule the next update in {REFRESH/1000} seconds (REFRESH ms)
        parent_element.after(REFRESH, fetch_and_update_prices)

    # This will be referenced as !frame3
    stocks_list = ttk.Frame(parent_element)
    stocks_list.pack()

    # Define the fixed size for the scrollable frame
    frame_width = 400
    frame_height = 560

    # Main container frame
    container = ttk.Frame(parent_element, style="TFrame")
    container.pack(pady=10, padx=10)

    # Create a canvas for scrolling
    canvas = Canvas(container, width=frame_width, height=frame_height, highlightthickness=0)
    canvas.pack(side="left", fill="both", expand=True)

    # Add a scrollbar to the canvas
    scrollbar = ttk.Scrollbar(container, orient="vertical", command=canvas.yview)
    scrollbar.pack(side="right", fill="y")
    canvas.configure(yscrollcommand=scrollbar.set)

    # Create a frame inside the canvas for the scrollable content
    scrollable_frame = ttk.Frame(canvas)
    canvas.create_window((0, 0), window=scrollable_frame, anchor="n")

    # Ensure the canvas scrolls properly when the frame content changes
    scrollable_frame.bind(
        "<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    # Add mouse wheel scrolling support for both canvas and scrollable frame
    def on_mouse_wheel(event):
        canvas.yview_scroll(-1 * (event.delta // 120), "units")

    # Bind the mouse wheel event to both the canvas and the scrollable frame
    canvas.bind_all("<MouseWheel>", on_mouse_wheel)
    canvas.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))  # For macOS
    canvas.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))  # For macOS
    parent_element.bind("<Enter>", lambda e: canvas.bind_all("<MouseWheel>", on_mouse_wheel))
    parent_element.bind("<Leave>", lambda e: canvas.unbind_all("<MouseWheel>"))

    # Configure the grid for centering
    scrollable_frame.columnconfigure(0, weight=1)

    # Configure the grid for centering
    scrollable_frame.columnconfigure(0, weight=1)

    # Create lists to hold label references
    current_price_labels = []
    price_change_labels = []
    news_buttons = []  # List to store the references for news buttons

    # Add stock information rows
    stocks = get_stocks()  # Fetch the list of stock symbols
    for i, symbol in enumerate(stocks):
        # Create a frame for each stock row
        frame = ttk.Frame(scrollable_frame, style="TFrame")
        frame.grid(row=i, column=0, pady=5, padx=5)
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        frame.columnconfigure(2, weight=1)
        frame.columnconfigure(3, weight=1)

        # Add stock logo
        logo = get_logo(symbol, width=50, height=50)
        logo_label = ttk.Label(frame, image=logo)
        logo_label.image = logo  # Keep a reference to prevent garbage collection
        logo_label.grid(row=0, column=0, rowspan=2)

        # Add stock symbol
        text_label = ttk.Label(frame, text=symbol, anchor="center", font="Helvetica 12 bold", width=10)
        text_label.grid(row=0, column=1, rowspan=2, padx=5)

        # Add stock price
        current_price_label = ttk.Label(frame, text="$0.00", anchor="center", width=12, padding="0 0 15 0")
        current_price_label.grid(row=0, column=2)
        current_price_labels.append(current_price_label)

        # Add price change
        price_change_label = ttk.Label(frame, text="", anchor="center", width=12, padding="0 0 15 0")
        price_change_label.grid(row=1, column=2)
        price_change_labels.append(price_change_label)

        # Add news button if news are available
        news_count = get_news(symbol)["quantity"]
        news_button = ttk.Button(frame, text=f"{news_count if news_count <= 50 else '>50'} news",
                                 command=lambda s=symbol: show_news(s), width=8)
        news_button.grid(row=0, column=3, padx=(20, 10), rowspan=2)
        news_buttons.append(news_button)  # Store the button reference

    # Fetch and update prices for the first time
    fetch_and_update_prices()

    # Return the scrollable container in case additional customizations are needed
    return container


# Return a list of symbols of all stocks added by user
# Symbols are stored in a file in a user-specified path
def get_stocks():
    global file_path
    symbol_list = []
    with open(file_path) as f:
        for symbol in f:
            if symbol not in ("", "\n"):
                symbol_list.append(symbol.replace("\n", ""))
    return symbol_list


# Show news window for a specific stock
def show_news(symbol):
    # Create window
    width = 580
    height = 725
    news_window = Toplevel()
    news_window.resizable(False, False)
    screen_width = news_window.winfo_screenwidth()
    screen_height = news_window.winfo_screenheight()
    x_coordinate = int((screen_width / 2) - width)
    y_coordinate = int((screen_height / 2) - (height / 2))
    news_window.geometry(f"{width}x{height}+{x_coordinate}+{y_coordinate}")
    news_window.title(f"{symbol} News")

    # Get news
    news_data = get_news(symbol)
    news = news_data["news"]

    # Create a main frame for the entire content
    main_frame = ttk.Frame(news_window)
    main_frame.pack(fill="both", expand=True)

    # Add a label for the stock's news title
    symbol_label = ttk.Label(main_frame, text=f"{get_full_name(symbol)} (${symbol}) News", font=("Helvetica", 18, "bold"))
    symbol_label.pack(pady=5)

    # Add info frame for financials
    info_frame = ttk.Frame(main_frame)
    info_frame.pack(pady=10)
    info_label1 = ttk.Label(info_frame, text=f"52 Weeks", font=("Helvetica", 13, "bold"), anchor="center", padding="0 0 0 3")
    info_label1.pack()
    info_label2 = ttk.Label(info_frame, text=f"H: ${get_financials(symbol)['52WeekHigh']:.2f}", font=("Helvetica", 12), anchor="center")
    info_label2.pack()
    info_label3 = ttk.Label(info_frame, text=f"L: ${get_financials(symbol)['52WeekLow']:.2f}", font=("Helvetica", 12),
                            anchor="center")
    info_label3.pack()
    info_label4 = ttk.Label(info_frame, text=f"5-day price return daily", font=("Helvetica", 13, "bold"), anchor="center",
                            padding="0 3 0 0")
    info_label4.pack()
    info_label5 = ttk.Label(info_frame, text=f"{get_financials(symbol)['5DayPriceReturnDaily']}%", font=("Helvetica", 12), anchor="center")
    info_label5.pack()

    # Create a scrollable frame for news content
    canvas = Canvas(main_frame)
    scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = ttk.Frame(canvas)

    scrollable_frame.bind(
        "<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)
    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Enable scrolling with the mouse wheel
    def on_mouse_wheel(event):
        canvas.yview_scroll(-1 * (event.delta // 120), "units")

    # Bind the mouse wheel event
    news_window.bind("<MouseWheel>", on_mouse_wheel)  # For Windows and Linux
    news_window.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))  # For macOS
    news_window.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))  # For macOS

    # Frame styles
    style = ttk.Style()
    style.configure("NewsFrame.TFrame", relief="solid", borderwidth=1)
    style.configure("Headline.TLabel", font=("Helvetica", 14, "bold"), wraplength=390, justify="center")
    style.configure("HeadlineHover.TLabel", font=("Helvetica", 14, "bold", "underline"), wraplength=390, justify="center")
    style.configure("Summary.TLabel", wraplength=400, justify="center")

    # Set a fixed width for the entire scrollable frame
    fixed_width = 416  # Adjust this value to control the width of each news frame

    # Set a fixed amount of news to show
    max_news = 50
    for i, article in enumerate(news):
        if i == max_news:
            break
        frame = ttk.Frame(scrollable_frame, style="NewsFrame.TFrame", padding=10, width=fixed_width)
        frame.grid(row=i, column=0, pady=5, padx=20, sticky="ew")

        # Make sure each column inside the frame is stretched equally
        frame.grid_columnconfigure(0, weight=1)
        frame.grid_columnconfigure(1, weight=1)

        # Add image if available
        if img_link := article.get("image"):
            image = get_image(img_link, width=75, height=75)
            image_label = ttk.Label(frame, image=image)
            image_label.image = image
            image_label.grid(row=0, column=0, rowspan=2, padx=10, pady=5)
        else:
            placeholder = ttk.Label(frame, text="No Image", width=10, anchor="center")
            placeholder.grid(row=0, column=0, rowspan=2, padx=10, pady=5)

        # Headline
        headline_label = ttk.Label(
            frame, text=article.get("headline"), style="Headline.TLabel", cursor="hand2"
        )
        headline_label.grid(row=0, column=1, sticky="ew", pady=5, padx=5)
        headline_label.bind("<Button-1>", lambda e, url=article.get("url"): webbrowser.open(url))

        # Hover effects for headline
        def on_enter_headline(event, hl=headline_label):
            hl.configure(style="HeadlineHover.TLabel")

        def on_leave_headline(event, hl=headline_label):
            hl.configure(style="Headline.TLabel")

        headline_label.bind("<Enter>", on_enter_headline)
        headline_label.bind("<Leave>", on_leave_headline)

        # Summary
        summary = article.get("summary", "No summary available.")
        if len(summary) > 200:
            summary = summary[:200] + "..."
        summary_label = ttk.Label(frame, text=summary, style="Summary.TLabel")
        summary_label.grid(row=1, column=1, sticky="ew", pady=5, padx=5)

    # Press ESC to close window
    news_window.bind("<Escape>", lambda e: news_window.destroy())
    # Set focus
    news_window.focus_set()


# Returns company news of the last {d} days
def get_news(symbol):
    d = 30
    news = finnhub_client.company_news(symbol=symbol, _from=date.today() - timedelta(days=d), to=date.today())
    quantity = len(news)
    return {"news": news, "quantity": quantity}


# Shows a window that lets user add a stock to their list
ref = False  # Keeps track of refreshing stock list


# Shows a window that lets users add stocks
def show_add_stock_window(element):
    # Make sure refreshing is false by default
    global ref
    ref = False

    # Create a window
    width = 200
    height = 150
    w = Toplevel()
    w.resizable(False, False)
    screen_width = w.winfo_screenwidth()
    screen_height = w.winfo_screenheight()
    x_coordinate = int((screen_width / 2) - (width / 2))
    y_coordinate = int((screen_height / 2) - (height / 2))
    w.geometry(f"{width}x{height}+{x_coordinate}+{y_coordinate}")
    w.title("Add")

    symbol_var = StringVar()

    # Submits a list of stocks to be removed
    def submit(event=None):
        symbol = symbol_var.get().upper().strip()
        if symbol in get_stocks():
            messagebox.showwarning(title="Couldn't add stock", message=f'"{symbol}" is already added')
            w.focus_set()
        elif fetch_prices(symbol)["current_price"]:
            add_stock(symbol)
            messagebox.showinfo(title=f"{symbol} added", message=f"{symbol} was successfully added to your stock list!")
            global ref
            ref = True
            w.focus_set()
        else:
            messagebox.showwarning(title="Couldn't add stock", message=f'Couldn\'t find "{symbol}"')
            w.focus_set()
        e.focus_set()

    # Takes care of refreshing the stock list and closing the window
    def on_close(event=None):
        if ref:
            refresh_frame(element.children["!frame3"])
        w.destroy()

    w.bind("<Return>", submit)
    w.bind("<Escape>", on_close)

    # Widgets
    l = ttk.Label(w, text="Enter stock symbol", font=("Helvetica", 14))
    l.pack(pady=10)
    e = ttk.Entry(w, textvariable=symbol_var)
    e.pack()
    submit_button = ttk.Button(w, text="Add", command=lambda: submit())
    submit_button.pack(pady=10)

    w.protocol("WM_DELETE_WINDOW", on_close)

    # Set focus and loop the window
    e.focus_set()
    w.mainloop()


# Add stock to file
def add_stock(symbol):
    global file_path
    symbol = symbol.strip().upper()

    if not fetch_prices(symbol)["current_price"]:
        raise ValueError("Stock not found")

    with open(file_path, "a") as f:
        f.write(f"{symbol}\n")


# Show a window that lets user remove a stock from their list
ref2 = False  # Keeps track of refreshing stock list


# Shows a window that lets users remove stocks from their list
def show_remove_stock_window(element):
    # Make sure refreshing is false by default
    global ref2
    ref2 = False
    if len(get_stocks()) == 0:
        messagebox.showwarning(title="No stocks", message="You can't remove a stock since you don't have any added")
        return
    width = 220
    height = 240
    w = Toplevel()
    w.resizable(False, False)
    screen_width = w.winfo_screenwidth()
    screen_height = w.winfo_screenheight()
    x_coordinate = int((screen_width / 2) - (width / 2))
    y_coordinate = int((screen_height / 2) - (height / 2))
    w.geometry(f"{width}x{height}+{x_coordinate}+{y_coordinate}")
    w.title("Remove")

    w.bind("<Return>", lambda e: delete(listbox.curselection()))

    # Widgets
    label = ttk.Label(w, text="Delete a stock symbol", font=("Helvetica", 14))
    label.pack(pady=10)
    frame = ttk.Frame(w, padding="0 0 0 0")
    frame.pack()
    listbox = Listbox(frame, selectmode=MULTIPLE, height=7, font="Helvetica 10")
    listbox.pack(side="left", fill="y")

    # Add stocks to list
    for symbol in get_stocks():
        listbox.insert(END, symbol)

    # Create a Scrollbar and link it to the Listbox
    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=listbox.yview)
    scrollbar.pack(side="right", fill="y")

    # Configure the Listbox to work with the Scrollbar
    listbox.configure(yscrollcommand=scrollbar.set)

    # Deletes selected stocks from list
    def delete(selected_indexes):
        if len(selected_indexes) < 0:
            messagebox.showwarning(title="No stocks selected", message="You must select stock(s) in order to remove them")
            w.focus_set()
            return
        selected_items = [listbox.get(i) for i in range(listbox.size())]
        for item in reversed(selected_indexes):
            remove_stock(selected_items[item])
            listbox.delete(item)
        messagebox.showinfo(title="Success", message=f"Successfully deleted {len(selected_indexes)} position(s)")
        global ref2
        ref2 = True
        w.focus_set()
        listbox.focus_set()

    submit_button = ttk.Button(w, text="Remove stock", command=lambda: delete(listbox.curselection()))
    submit_button.pack(pady=10)

    # Refreshes list and closes window
    def on_close(event=None):
        if ref2:
            refresh_frame(element.children["!frame3"])
        w.destroy()

    w.bind("<Escape>", on_close)
    w.protocol("WM_DELETE_WINDOW", on_close)

    # Set focus and loop window
    listbox.focus_set()
    w.mainloop()


# Remove stock from file
def remove_stock(symbol):
    global file_path
    new_file = []
    # Look for the symbol to remove
    with open(file_path) as f:
        for line in f:
            if symbol not in line:
                new_file.append(line)
    # Re-write the file
    with open(file_path, "w") as f:
        f.write(''.join(new_file))


# Refreshes a frame
def refresh_frame(frame):
    for widget in frame.winfo_children():
        widget.destroy()
    show_stocks(frame)


# Get fetch price and price changes
def fetch_prices(symbol):
    prices = finnhub_client.quote(symbol)
    if prices['c'] == 0 and prices['d'] is None and prices['dp'] is None:
        return {"current_price": 0, "price_change": 0, "percent_change": 0}
    d = dict()
    d["current_price"] = round(prices["c"], 2) if prices["c"] >= 1 else prices["c"]
    d["price_change"] = round(prices["d"], 2) if prices["d"] >= 1 else prices["d"]
    d["percent_change"] = round(prices["dp"], 1)
    return d


# Returns full name of a company
def get_full_name(symbol):
    return finnhub_client.company_profile2(symbol=symbol).get("name") if fetch_prices(symbol)["current_price"] else None


# Returns basic financial info
def get_financials(symbol):
    d = dict()
    d["52WeekHigh"] = round(finnhub_client.company_basic_financials(symbol, 'all')["metric"]["52WeekHigh"], 2)
    d["52WeekLow"] = round(finnhub_client.company_basic_financials(symbol, 'all')["metric"]["52WeekLow"], 2)
    d["5DayPriceReturnDaily"] = round(finnhub_client.company_basic_financials(symbol, 'all')["metric"]["5DayPriceReturnDaily"], 1)
    return d


# Get logo image from given url
def get_logo(symbol, width, height):
    if not (logo_url := finnhub_client.company_profile2(symbol=symbol).get("logo")):
        print(f"${symbol} logo not found")
        return None
    return get_image(logo_url, width, height)


# Return a tkinter-ready image from an url
def get_image(url, width=30, height=30):
    try:
        # Fetch the image from the URL
        response = requests.get(url)
        response.raise_for_status()
        img_data = BytesIO(response.content)

        # Open the image using Pillow
        image = Image.open(img_data).convert("RGBA")

        # Resize the image while maintaining aspect ratio
        image.thumbnail((width, height), Image.Resampling.LANCZOS)

        # Create a square canvas with the desired dimensions
        canvas = Image.new("RGBA", (width, height), (0, 0, 0, 0))  # Transparent background

        # Center the image on the canvas
        x_offset = (width - image.width) // 2
        y_offset = (height - image.height) // 2
        canvas.paste(image, (x_offset, y_offset), image)

        # Convert the canvas to a format tkinter can use
        return ImageTk.PhotoImage(canvas)
    except Exception as e:
        print(f"Error fetching or processing image: {e}")
        return None


# Update symbol file path
# def update_path(new_path):
#     global file_path
#     file_path = new_path


# Scrollable frame for varying content
def create_scrollable_frame(window):
    # Create a canvas
    canvas = Canvas(window)
    scrollbar = ttk.Scrollbar(window, orient="vertical", command=canvas.yview)
    scrollable_frame = ttk.Frame(canvas)

    # Configure canvas to handle vertical scrolling
    canvas.configure(yscrollcommand=scrollbar.set)

    # Add the scrollable frame to the canvas window
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    scrollbar.pack(side="right", fill="y")
    canvas.pack(side="left", fill="both", expand=True)

    # This function ensures that the scrollable region is updated whenever the content size changes
    def on_frame_configure(event):
        canvas.configure(scrollregion=canvas.bbox("all"))

    # Bind the event to resize the canvas whenever the content size changes
    scrollable_frame.bind("<Configure>", on_frame_configure)

    return scrollable_frame


# Run the program
if __name__ == '__main__':
    main()
